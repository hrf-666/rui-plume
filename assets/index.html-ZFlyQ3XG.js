import{_ as t,c as e,b as n,o as r}from"./app-BxaswAnj.js";const i="/rui-plume/assets/3.%E6%A7%BD%E4%BD%8D%E5%AE%98%E7%BD%91%E8%AF%B4%E6%98%8E-CqBV5oW6.jpg",l="/rui-plume/assets/4.%E5%AE%98%E7%BD%91%E7%BF%BB%E8%AF%91-CpFXLTTz.jpg",a="/rui-plume/assets/5.%E6%A7%BD%E4%BD%8D%E7%A4%BA%E4%BE%8B-CiLY4NKw.jpg",o={};function m(c,s){return r(),e("div",null,[...s[0]||(s[0]=[n('<h1 id="集群算法-分片-槽位slot" tabindex="-1"><a class="header-anchor" href="#集群算法-分片-槽位slot"><span>集群算法-分片-槽位slot</span></a></h1><h3 id="官网出处" tabindex="-1"><a class="header-anchor" href="#官网出处"><span>官网出处：</span></a></h3><p><img src="'+i+'" alt=""></p><p>翻译说明：<img src="'+l+'" alt=""></p><h3 id="redis集群的槽位slot" tabindex="-1"><a class="header-anchor" href="#redis集群的槽位slot"><span>redis集群的槽位slot</span></a></h3><p>Redis集群的数据分片</p><p>Redis集群没有使用一致性hash 而是引入了哈希槽的概念。</p><p>Redis集群有16384个哈希槽每个key通过CRC16校验后对16384取模来决定放置哪个槽，集群的每个节点负责一部分hash槽，举个例子，比如当前集群有3个节点，那么：</p><p><img src="'+a+'" alt=""></p><h3 id="redis集群的分片" tabindex="-1"><a class="header-anchor" href="#redis集群的分片"><span>redis集群的分片</span></a></h3><table><thead><tr><th>分片是什么</th><th>使用Redis集群时我们会将存储的数据分散到多台redis机器上，这称为分片。简言之，集群中的每个Redis实例都被认为是整个数据的一个分片。</th></tr></thead><tbody><tr><td>如何找到给定key的分片</td><td>为了找到给定key的分片，我们对key进行CRC16(key)算法处理并通过对总分片数量取模。然后，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mstyle mathsize="1.2em"><mtext>使用确定性哈希函数</mtext></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{red}{\\large使用确定性哈希函数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.82em;"></span><span class="mord cjk_fallback sizing reset-size6 size7" style="color:red;">使用确定性哈希函数</span></span></span></span>，这意味着给定的key<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mstyle mathsize="1.2em"><mtext>将多次始终映射到同一个分片</mtext></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{red}{\\large将多次始终映射到同一个分片}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.82em;"></span><span class="mord cjk_fallback sizing reset-size6 size7" style="color:red;">将多次始终映射到同一个分片</span></span></span></span>，我们可以推断将来读取特定key的位置。</td></tr></tbody></table><h3 id="分片和槽位的优势" tabindex="-1"><a class="header-anchor" href="#分片和槽位的优势"><span>分片和槽位的优势</span></a></h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="blue"><mstyle mathsize="1.2em"><mtext>最大优势，方便扩缩容和数据分派查找</mtext></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{blue}{\\large 最大优势，方便扩缩容和数据分派查找}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.82em;"></span><span class="mord cjk_fallback sizing reset-size6 size7" style="color:blue;">最大优势，方便扩缩容和数据分派查找</span></span></span></span></p><p>这种结构很容易添加或者删除节点，比如如果我想添加个节点D，我需要从节点A，B，C中得部分槽位到D上。如果我想一出节点A，需要将A中的槽移动到B和C节点上，然后将没有任何槽的节点从集群中移除即可。由于一个结点将哈希槽移动到另一个节点不会停止服务，所以无论添加删除或者改变某个节点的哈希槽的数量都不会造成集群不可用的状态。<img src="'+a+'" alt=""></p>',14)])])}const d=t(o,[["render",m]]),h=JSON.parse('{"path":"/article/3du5swea/","title":"集群算法-分片-槽位slot","lang":"zh-CN","frontmatter":{"title":"集群算法-分片-槽位slot","tags":["redis"],"createTime":"2025/08/25 22:29:43","permalink":"/article/3du5swea/","watermark":true},"readingTime":{"minutes":1.66,"words":499},"git":{"createdTime":1756136329000,"updatedTime":1756136329000,"contributors":[{"name":"HRF","username":"HRF","email":"3398775460@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/HRF?v=4","url":"https://github.com/HRF"}]},"filePathRelative":"study-notes/back-end/redis/10.Redis集群(cluster)/2.集群算法-分片-槽位slot.md","headers":[],"categoryList":[{"id":"3c4c90","sort":10002,"name":"study-notes"},{"id":"fe643d","sort":10003,"name":"back-end"},{"id":"46b09b","sort":10033,"name":"redis"},{"id":"9fbdec","sort":10,"name":"Redis集群(cluster)"}]}');export{d as comp,h as data};
