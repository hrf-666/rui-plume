import{_ as e,c as a,b as i,o as t}from"./app-BxaswAnj.js";const n="/rui-plume/assets/71.GEO%E5%8E%9F%E7%90%86-sRXQSxdx.jpg",r="/rui-plume/assets/72.GEO-geoadd-CL4aKnwn.png",h="/rui-plume/assets/73.GEO-geopos-Dzt9t57o.png",p="/rui-plume/assets/75.GEO-GEODIST-zMS0g4F-.png",l="/rui-plume/assets/76.GEO-georadius-Dhz3fXGg.png",d="/rui-plume/assets/77.GEO-georadiusbymember-SFiCPqvP.png",m="/rui-plume/assets/74.GEO-GEOhash-96GQA03W.png",o={};function k(c,s){return t(),a("div",null,[...s[0]||(s[0]=[i('<h1 id="redis地理空间-geo" tabindex="-1"><a class="header-anchor" href="#redis地理空间-geo"><span>Redis地理空间(GEO)</span></a></h1><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介：</span></a></h3><p>移动互联网时代LBS应用越来越多，交友软件中附近的小姐姐、外卖软件中附近的美食店铺、高德地图附近的核酸检查点等等，那这种附近各种形形色色的XXX地址位置选择是如何实现的? 地球上的地理位置是使用二维的经纬度表示，经度范围(-180,180]，纬度范围(-90，90]，只要我们确定一个点的经纬度就可以取得他在地球的位置。 例如滴滴打车，最直观的操作就是实时记录更新各个车的位置， 然后当我们要找车时，在数据库中查找距离我们(坐标x0,y0)附近r公里范围内部的车辆 使用如下SQL即可:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">select</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> taxi </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">from</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> position </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">where</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> x0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">r</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> X </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> x0 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> r </span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">and</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> y0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">-</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">r</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> y </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> y0</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">r</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mtext>但是这样会有什么问题呢</mtext><mo stretchy="false">?</mo></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{red}{但是这样会有什么问题呢?}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord cjk_fallback" style="color:red;">但是这样会有什么问题呢</span><span class="mclose" style="color:red;">?</span></span></span></span> 1.查询性能问题，如果并发高，数据量大这种查询是要搞垮数据库的 2.这个查询的是一个矩形访问，而不是以我为中心r公里为半径的圆形访问。 3.精准度的问题，我们知道地球不是平面坐标系，而是一个圆球，这种矩形计算在长距离计算时会有很大误差</p><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><p><img src="'+n+'" alt=""></p><p>redis在3.2版本以后增加了地址位置的处理</p><h3 id="命令" tabindex="-1"><a class="header-anchor" href="#命令"><span>命令</span></a></h3><h3 id="_1-geoadd-key-longitude-latitude-member-longitude-latitude-member" tabindex="-1"><a class="header-anchor" href="#_1-geoadd-key-longitude-latitude-member-longitude-latitude-member"><span>1.GEOADD key longitude latitude member [longitude latitude member]</span></a></h3><p>多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的key中</p><p>命令：GEOADD city 116.403963 39.915119 &quot;天安门&quot; 116.403414 39.924091 &quot;故宫&quot; 116.024067 40.362639 &quot;长城&quot;</p><p>geo类型实际上是zset，可以使用zset相关的命令对其进行遍历，如果遍历出现中文乱码可以使用如下命令：redis-cli --raw</p><p><img src="'+r+'" alt=""></p><h3 id="_2-geopos-key-member-member" tabindex="-1"><a class="header-anchor" href="#_2-geopos-key-member-member"><span>2.GEOPOS key member [member]</span></a></h3><p>从键里面返回所有指定名称(member )元素的位置（经度和纬度），不存在返回nil</p><p>GEOPOS city 天安门 故宫 长城</p><p><img src="'+h+'" alt=""></p><h3 id="_3-geodist-key-member1-member2-m-km-ft-mi" tabindex="-1"><a class="header-anchor" href="#_3-geodist-key-member1-member2-m-km-ft-mi"><span>3.GEODIST key member1 member2 [M|KM|FT|MI]</span></a></h3><p>返回两个给定位置之间的距离</p><p>m-米</p><p>km-千米</p><p>ft-英寸</p><p>mi-英里</p><p><img src="'+p+'" alt=""></p><h3 id="_4-georadius-key-longitude-latitude-radius-m-km-ft-mi-withcoord-withdist-withhash-count-count-any" tabindex="-1"><a class="header-anchor" href="#_4-georadius-key-longitude-latitude-radius-m-km-ft-mi-withcoord-withdist-withhash-count-count-any"><span>4.GEORADIUS key longitude latitude radius M|KM|FT|MI [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]</span></a></h3><p>以给定的经纬度为中心，返回与中心的距离不超过给定最大距离的所有元素位置</p><p>WITHDIST: 在返回位置元素的同时， 将位置元素与中心之间的距离也一并返回。 距离的单位和用户给定的范围单位保持一致。 WITHCOORD: 将位置元素的经度和维度也一并返回。 WITHHASH:以 52 位有符号整数的形式， 返回位置元素经过原始 geohash 编码的有序集合分值。 这个选项主要用于底层应用或者调试，实际中的作用并不大 COUNT 限定返回的记录数。</p><p><img src="'+l+'" alt=""></p><h3 id="_5-georadiusbymember" tabindex="-1"><a class="header-anchor" href="#_5-georadiusbymember"><span>5.GEORADIUSBYMEMBER</span></a></h3><p>跟GEORADIUS类似</p><p><img src="'+d+'" alt=""></p><h3 id="_6-geohash" tabindex="-1"><a class="header-anchor" href="#_6-geohash"><span>6.GEOHASH</span></a></h3><p>返回一个或多个位置元素的GEOhash表示</p><p>geohash 算法生成的base32编码值，3维变2维变1维</p><p><img src="'+m+'" alt=""></p>',36)])])}const u=e(o,[["render",k]]),y=JSON.parse('{"path":"/article/t861s8u3/","title":"11.Redis地理空间(GEO)","lang":"zh-CN","frontmatter":{"title":"11.Redis地理空间(GEO)","createTime":"2025/08/25 22:29:42","permalink":"/article/t861s8u3/","watermark":true},"readingTime":{"minutes":2.6,"words":779},"git":{"createdTime":1756136329000,"updatedTime":1756136329000,"contributors":[{"name":"HRF","username":"HRF","email":"3398775460@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/HRF?v=4","url":"https://github.com/HRF"}]},"filePathRelative":"study-notes/back-end/redis/3.redis10大数据类型/11.Redis地理空间(GEO).md","headers":[],"categoryList":[{"id":"3c4c90","sort":10002,"name":"study-notes"},{"id":"fe643d","sort":10003,"name":"back-end"},{"id":"46b09b","sort":10033,"name":"redis"},{"id":"b49e1a","sort":3,"name":"redis10大数据类型"}]}');export{u as comp,y as data};
