import{_ as a}from"./3.哨兵架构-CBtGluOK.js";import{_ as e,c as t,b as i,o as l}from"./app-BxaswAnj.js";const n="/rui-plume/assets/19.%E4%B8%BB%E8%A7%82%E4%B8%8B%E7%BA%BF%E8%AF%B4%E6%98%8E-DCYBiLTO.jpg",m="/rui-plume/assets/20.ODown%E5%AE%A2%E8%A7%82%E4%B8%8B%E7%BA%BF%E8%AF%B4%E6%98%8E-Di10PnEF.jpg",r="/rui-plume/assets/21.%E4%B8%BB%E5%93%A8%E5%85%B5%E8%A7%A3%E9%87%8A-CawJVEYQ.jpg",o="/rui-plume/assets/22.%E5%93%A8%E5%85%B5%E5%85%B5%E7%8E%8B%E9%80%89%E4%B8%BE-qPR0WaO7.jpg",p="/rui-plume/assets/23.Raft%E7%AE%97%E6%B3%95-C75uABCh.jpg",c="/rui-plume/assets/24.%E6%96%B0master%E9%80%89%E4%B8%BE-DoNL6dT3.jpg",d="/rui-plume/assets/25.%E4%BB%8E%E8%8A%82%E7%82%B9%E5%8D%87%E7%BA%A7%E4%B8%BA%E4%B8%BB%E8%8A%82%E7%82%B9%E9%BB%98%E8%AE%A4%E4%BC%98%E5%85%88%E7%BA%A7-CgWVo0i_.jpg",h="/rui-plume/assets/26.%E9%80%89%E4%B8%BE%E6%96%B0master%E6%80%BB%E7%BB%93-C948IBGc.jpg",g={};function z(x,s){return l(),t("div",null,[...s[0]||(s[0]=[i('<h1 id="哨兵运行流程和选举原理" tabindex="-1"><a class="header-anchor" href="#哨兵运行流程和选举原理"><span>哨兵运行流程和选举原理</span></a></h1><p>当一个主从配置中master失效后，sentinel可以选举出一个新的master用于自动接替原master的工作，主从配置中的其他redis服务器自动指向新的master同步数据，一般建议sentinel采取奇数台，防止某一台sentinel无法连接到master导致误切换</p><h3 id="运行流程-故障切换" tabindex="-1"><a class="header-anchor" href="#运行流程-故障切换"><span>运行流程，故障切换</span></a></h3><ul><li><p>三个哨兵监控一主二从，正常运行中</p><p><img src="'+a+'" alt=""></p></li><li><p>SDown主观下线(Subjectively Down)</p><ol><li><p>SDOWN（主观不可用）是<strong>单个sentinel自己主观上</strong>检测到的关于master的状态，从sentinel的角度来看，如果发送了PING心跳后，在一定时间内没有收到合法的回复，就达到了SDOWN的条件。</p></li><li><p>sentinel配置文件中的down-after-milliseconds设置了判断主观下线的时间长度</p></li><li><p>说明</p><p><img src="'+n+'" alt=""></p></li></ol></li><li><p>ODown客观下线(Objectively Down)</p><ol><li><p>ODOWN需要一定数量的sentinel，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mtext>多个哨兵达成一致意见</mtext></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{red}{多个哨兵达成一致意见}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback" style="color:red;">多个哨兵达成一致意见</span></span></span></span>才能认为一个master客观上已经宕机</p></li><li><p>说明</p><p><img src="'+m+'" alt=""></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mstyle mathsize="1.2em"><mi>q</mi><mi>u</mi><mi>o</mi><mi>r</mi><mi>u</mi><mi>m</mi><mtext>这个参数是进行客观下线的一个依据，法定人数</mtext><mi mathvariant="normal">/</mi><mtext>法定票数</mtext></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{red}{\\large quorum这个参数是进行客观下线的一个依据，法定人数/法定票数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.3em;"></span><span class="mord mathnormal sizing reset-size6 size7" style="margin-right:0.03588em;color:red;">q</span><span class="mord mathnormal sizing reset-size6 size7" style="color:red;">u</span><span class="mord mathnormal sizing reset-size6 size7" style="margin-right:0.02778em;color:red;">or</span><span class="mord mathnormal sizing reset-size6 size7" style="color:red;">u</span><span class="mord mathnormal sizing reset-size6 size7" style="color:red;">m</span><span class="mord cjk_fallback sizing reset-size6 size7" style="color:red;">这个参数是进行客观下线的一个依据，法定人数</span><span class="mord sizing reset-size6 size7" style="color:red;">/</span><span class="mord cjk_fallback sizing reset-size6 size7" style="color:red;">法定票数</span></span></span></span> 意思是至少有quorum个sentinel认为这个master有故障才会对这个master进行下线以及故障转移。因为有的时候，某个sentinel节点可能因为自身网络原因导致无法连接master，而此时master并没有出现故障，所以这就需要多个sentinel都一致认为该master有问题，才可以进行下一步操作，这就保证了公平性和高可用。</p></li></ol></li><li><p>选举出领导者哨兵(哨兵中选出兵王)</p><p><img src="'+r+'" alt=""></p><ol><li><p>当主节点被判断客观下线后，各个哨兵节点会进行协商，先选举出一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mstyle mathsize="1.2em"><mtext>领导者哨兵节点（兵王）</mtext></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{red}{\\large 领导者哨兵节点（兵王）}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.82em;"></span><span class="mord cjk_fallback sizing reset-size6 size7" style="color:red;">领导者哨兵节点（兵王）</span></span></span></span>并由该领导者也即被选举出的兵王进行failover（故障转移）。</p><p>哨兵日志文件解读分析</p><p><img src="'+o+'" alt=""></p></li><li><p>哨兵领导者，兵王如何选出来的？-&gt; Raft算法</p><p><img src="'+p+'" alt=""></p><p>监视该主节点的所有哨兵都有可能被选为领导者，选举使用的算法是Raft算法;Raft算法的基本思路是先到先得:即在一轮选举中，哨兵A向B发送成为领导者的申请、如果B没有同意过其他哨兵，则会同意A成为领导者。</p></li></ol></li><li><p>由兵王开始推动故障切换流程并选出新的master</p><ol><li><p>新主登基</p><ul><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mstyle mathsize="1.2em"><mtext>某个</mtext><mi>S</mi><mi>l</mi><mi>a</mi><mi>v</mi><mi>e</mi><mtext>被选中成为新</mtext><mi>M</mi><mi>a</mi><mi>s</mi><mi>t</mi><mi>e</mi><mi>r</mi></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{red}{\\large 某个Slave被选中成为新Master}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;"></span><span class="mord cjk_fallback sizing reset-size6 size7" style="color:red;">某个</span><span class="mord mathnormal sizing reset-size6 size7" style="margin-right:0.01968em;color:red;">Sl</span><span class="mord mathnormal sizing reset-size6 size7" style="color:red;">a</span><span class="mord mathnormal sizing reset-size6 size7" style="margin-right:0.03588em;color:red;">v</span><span class="mord mathnormal sizing reset-size6 size7" style="color:red;">e</span><span class="mord cjk_fallback sizing reset-size6 size7" style="color:red;">被选中成为新</span><span class="mord mathnormal sizing reset-size6 size7" style="margin-right:0.10903em;color:red;">M</span><span class="mord mathnormal sizing reset-size6 size7" style="color:red;">a</span><span class="mord mathnormal sizing reset-size6 size7" style="color:red;">s</span><span class="mord mathnormal sizing reset-size6 size7" style="color:red;">t</span><span class="mord mathnormal sizing reset-size6 size7" style="margin-right:0.02778em;color:red;">er</span></span></span></span></p></li><li><p>选出新master的规则，剩余Slave节点健康前提下，会按下图规则进行选举</p><p><img src="'+c+'" alt=""></p><ol><li>redis.conf文件中，优先级slave-priority或者replica-priority最高的从节点(数字越小优先级越高)</li></ol><p><img src="'+d+'" alt=""></p><ol start="2"><li><p>复制偏移位置offset最大的从节点(也就是在master还没有宕机时，复制到数据比其他Slave要多)</p></li><li><p>最小Run ID的从节点，字典顺序，ASCII码</p></li></ol></li></ul></li><li><p>群臣俯首</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mstyle mathsize="1.2em"><mtext>一朝天子一朝臣，换个码头重新拜</mtext></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{red}{\\large 一朝天子一朝臣，换个码头重新拜}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.82em;"></span><span class="mord cjk_fallback sizing reset-size6 size7" style="color:red;">一朝天子一朝臣，换个码头重新拜</span></span></span></span></li><li>执行slaveof no one命令让选出来的从节点成为新的主节点，并通过slaveof命令让其他节点成为其从节点</li><li>sentinel leader会对选举出的新master执行slaveof on one操作，将其提升为master节点</li><li>sentinel leader向其他slave发送命令，让剩余的slave成为新的master节点的slave</li></ul></li><li><p>旧主拜服</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mstyle mathsize="1.2em"><mtext>老</mtext><mi>m</mi><mi>a</mi><mi>s</mi><mi>t</mi><mi>e</mi><mi>r</mi><mtext>回来也认怂，会被降级为</mtext><mi>s</mi><mi>l</mi><mi>a</mi><mi>v</mi><mi>e</mi></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{red}{\\large 老master回来也认怂，会被降级为slave}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;"></span><span class="mord cjk_fallback sizing reset-size6 size7" style="color:red;">老</span><span class="mord mathnormal sizing reset-size6 size7" style="color:red;">ma</span><span class="mord mathnormal sizing reset-size6 size7" style="color:red;">s</span><span class="mord mathnormal sizing reset-size6 size7" style="color:red;">t</span><span class="mord mathnormal sizing reset-size6 size7" style="margin-right:0.02778em;color:red;">er</span><span class="mord cjk_fallback sizing reset-size6 size7" style="color:red;">回来也认怂，会被降级为</span><span class="mord mathnormal sizing reset-size6 size7" style="color:red;">s</span><span class="mord mathnormal sizing reset-size6 size7" style="margin-right:0.01968em;color:red;">l</span><span class="mord mathnormal sizing reset-size6 size7" style="color:red;">a</span><span class="mord mathnormal sizing reset-size6 size7" style="margin-right:0.03588em;color:red;">v</span><span class="mord mathnormal sizing reset-size6 size7" style="color:red;">e</span></span></span></span></li><li>老master重新上线后，会将它设置为新选出的master的从节点</li><li>sentinel leader会让原来的master降级为slave并恢复正常工作</li></ul></li><li><p>小总结</p><p>上述的failover操作均由sentinel自己独自完成，完全不需要人工干预</p><p><img src="'+h+'" alt=""></p></li></ol></li></ul><h3 id="哨兵使用建议" tabindex="-1"><a class="header-anchor" href="#哨兵使用建议"><span>哨兵使用建议</span></a></h3><ol><li>哨兵节点的数量应为多个，哨兵本身应该集群，保证高可用</li><li>哨兵节点的数量应该是奇数</li><li>各个哨兵节点的配置应一致</li><li>如果哨兵节点部署在Docker等容器里面，尤其要注意端口的正确映射</li><li>哨兵集群+主从复制，并不能保证数据零丢失，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mstyle mathsize="1.2em"><mtext>所以需要使用集群</mtext></mstyle></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{red}{\\large所以需要使用集群}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.82em;"></span><span class="mord cjk_fallback sizing reset-size6 size7" style="color:red;">所以需要使用集群</span></span></span></span></li></ol>',6)])])}const E=e(g,[["render",z]]),B=JSON.parse('{"path":"/article/o8qrjx1g/","title":"5.哨兵运行流程和选举原理","lang":"zh-CN","frontmatter":{"title":"5.哨兵运行流程和选举原理","createTime":"2025/08/25 22:29:43","permalink":"/article/o8qrjx1g/","watermark":true},"readingTime":{"minutes":3.84,"words":1151},"git":{"createdTime":1756136329000,"updatedTime":1756136329000,"contributors":[{"name":"HRF","username":"HRF","email":"3398775460@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/HRF?v=4","url":"https://github.com/HRF"}]},"filePathRelative":"study-notes/back-end/redis/9.Redis哨兵(sentinel)/5.哨兵运行流程和选举原理.md","headers":[],"categoryList":[{"id":"3c4c90","sort":10002,"name":"study-notes"},{"id":"fe643d","sort":10003,"name":"back-end"},{"id":"46b09b","sort":10033,"name":"redis"},{"id":"a9eb91","sort":9,"name":"Redis哨兵(sentinel)"}]}');export{E as comp,B as data};
