import{_ as t,c as a,b as s,o as i}from"./app-BxaswAnj.js";const r="/rui-plume/assets/1.Redis%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BA%A4%E4%BA%92%E6%A8%A1%E5%9E%8B-DvO5bHII.jpg",d={};function n(o,e){return i(),a("div",null,[...e[0]||(e[0]=[s('<h1 id="redis管道介绍" tabindex="-1"><a class="header-anchor" href="#redis管道介绍"><span>Redis管道介绍</span></a></h1><h3 id="面试题-如何优化频繁命令往返造成的性能瓶颈" tabindex="-1"><a class="header-anchor" href="#面试题-如何优化频繁命令往返造成的性能瓶颈"><span>面试题：如何优化频繁命令往返造成的性能瓶颈？</span></a></h3><p>Redis是一种基于<strong>客户端-服务端模型</strong>以及请求/响应协议的TCP服务。一个请求会遵循以下步骤: 1客户端向服务端发送命令分四步(发送命令→命令排队→命令执行-返回结果)，并监听Socket返回，通常以阻塞模式等待服务端响应。 2服务端处理命令，并将结果返回给客户端。 上述两步称为: Round Trip Time(简称RTT,数据包往返于两端的时间)。</p><p><img src="'+r+'" alt=""></p><p>如果同时需要执行大量的命令，那么就要等待上一条命令应答后再执行，这中间不仅仅多了RTT (Round Time Trip) ，而且还频繁调用系统IO， 发送网络请求，同时需要redis调用多次read()和write()系统方法， 系统方法会将数据从用户态转移到内核态，这样就会对进程上下文有比较大的影响了，性能不太好，0(π_ π)0。这时候Redis管道就出现了。</p>',5)])])}const m=t(d,[["render",n]]),p=JSON.parse('{"path":"/article/cfyi4at0/","title":"1.Redis管道介绍","lang":"zh-CN","frontmatter":{"title":"1.Redis管道介绍","createTime":"2025/08/25 22:29:40","permalink":"/article/cfyi4at0/","watermark":true},"readingTime":{"minutes":1.03,"words":309},"git":{"createdTime":1756136329000,"updatedTime":1756136329000,"contributors":[{"name":"HRF","username":"HRF","email":"3398775460@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/HRF?v=4","url":"https://github.com/HRF"}]},"filePathRelative":"study-notes/back-end/redis/6.Redis管道/1.Redis管道介绍.md","headers":[],"categoryList":[{"id":"3c4c90","sort":10002,"name":"study-notes"},{"id":"fe643d","sort":10003,"name":"back-end"},{"id":"46b09b","sort":10033,"name":"redis"},{"id":"483818","sort":6,"name":"Redis管道"}]}');export{m as comp,p as data};
