import{_ as s,c as t,b as e,o as r}from"./app-BxaswAnj.js";const n="/rui-plume/assets/78.List%E5%AE%9E%E7%8E%B0%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-CDUYH-nR.png",p="/rui-plume/assets/79.pub%E3%80%81sub-CJHmSHPA.png",i="/rui-plume/assets/80.stream%E7%BB%93%E6%9E%84-JeDCRoew.png",m="/rui-plume/assets/81.stream%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97-DCIbQnnH.png",o="/rui-plume/assets/82.%E9%98%9F%E5%88%97%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4-DgcdJL3t.png",l="/rui-plume/assets/83.%E6%B6%88%E8%B4%B9%E7%BB%84%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4-gd7tYz30.png",c="/rui-plume/assets/84.Stream-XADD-BVxWrMb6.png",d="/rui-plume/assets/85.Stream-XRANGE-loqQCqrH.png",h="/rui-plume/assets/86.Stream-XREVRANGE-C19Q4TgA.png",u="/rui-plume/assets/87.Stream-XDEL-B6zOtsKs.png",g="/rui-plume/assets/88.Stream-XLEN-CsjRuCvb.png",x="/rui-plume/assets/89.Stream-xtrim-7R9cQnzg.png",E="/rui-plume/assets/90.Stream-xread%E9%9D%9E%E9%98%BB%E5%A1%9E-BWJIS8Ic.png",_="/rui-plume/assets/91.Stream-xread%E9%98%BB%E5%A1%9E-DgkxC1j6.png",k="/rui-plume/assets/92.Stream-XREAD%E6%80%BB%E7%BB%93-UJD_X38l.png",y="/rui-plume/assets/93.Stream-xgroup-PgKc6uyv.png",b="/rui-plume/assets/94.%E5%90%8C%E7%BB%84%E6%B6%88%E8%B4%B9%E8%80%85-Dj0X3jSA.png",D="/rui-plume/assets/95.%E4%B8%8D%E5%90%8C%E7%BB%84%E6%B6%88%E8%B4%B9%E7%BB%84-BycSBJFs.png",B="/rui-plume/assets/96.%E6%B6%88%E6%81%AF%E8%AF%BB%E5%8F%96%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1-BhDxFNp-.png",S="/rui-plume/assets/97.%E6%B6%88%E6%81%AFack-BuzvDJb0.png",I="/rui-plume/assets/98.Stream-XPENDING-DlFh-3Jg.png",f="/rui-plume/assets/99.Stream-XPENDING-DIfvbQso.png",A="/rui-plume/assets/100.Stream-XACK-Jw8FiapO.jpg",R="/rui-plume/assets/101.Stream-XINFO-DPl_-5QE.jpg",X={};function w(N,a){return r(),t("div",null,[...a[0]||(a[0]=[e('<h1 id="redis流-stream" tabindex="-1"><a class="header-anchor" href="#redis流-stream"><span>Redis流(Stream)</span></a></h1><h3 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么"><span>是什么</span></a></h3><p>Redis5.0 之前的痛点，Redis消息队列的2种方案：</p><ol><li><p>List实现消息队列，List实现方式其实就是点对点的模式</p><p><img src="'+n+'" alt=""></p></li><li><p>Pub/Sub</p></li></ol><p><img src="'+p+'" alt=""></p><p>Redis5.0版本新增了一个更强大的数据结构---Stream</p><p>一句话：Stream流就是Redis版的MQ消息中间件+阻塞队列</p><h3 id="能干嘛" tabindex="-1"><a class="header-anchor" href="#能干嘛"><span>能干嘛</span></a></h3><p>实现消息队列，它支持消息的持久化、支持自动生成全局唯一ID、支持ack确认消息的模式、支持消费组模式等，让消息队列更加的稳定和可靠</p><h3 id="底层结构和原理说明" tabindex="-1"><a class="header-anchor" href="#底层结构和原理说明"><span>底层结构和原理说明</span></a></h3><p><img src="'+i+'" alt=""></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="blue"><mtext>一个消息链表，将所有加入的消息都串起来，每个消息都有一个唯一的</mtext><mi>I</mi><mi>D</mi><mtext>和对应的内容</mtext></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{blue}{一个消息链表，将所有加入的消息都串起来，每个消息都有一个唯一的ID和对应的内容}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback" style="color:blue;">一个消息链表，将所有加入的消息都串起来，每个消息都有一个唯一的</span><span class="mord mathnormal" style="margin-right:0.07847em;color:blue;">I</span><span class="mord mathnormal" style="margin-right:0.02778em;color:blue;">D</span><span class="mord cjk_fallback" style="color:blue;">和对应的内容</span></span></span></span></p><p><img src="'+m+'" alt=""></p><h3 id="基本命令理论简介" tabindex="-1"><a class="header-anchor" href="#基本命令理论简介"><span>基本命令理论简介</span></a></h3><h5 id="队列相关指令" tabindex="-1"><a class="header-anchor" href="#队列相关指令"><span>队列相关指令</span></a></h5><p><img src="'+o+'" alt=""></p><h5 id="消费组相关指令" tabindex="-1"><a class="header-anchor" href="#消费组相关指令"><span>消费组相关指令</span></a></h5><p><img src="'+l+'" alt=""></p><p>XINFO GROUPS 打印消费组的详细信息</p><p>XINFO STREAM 打印stream的详细信息</p><h5 id="四个特殊符号" tabindex="-1"><a class="header-anchor" href="#四个特殊符号"><span>四个特殊符号</span></a></h5><table><thead><tr><th>- +</th><th>最小和最大可能出现的Id</th></tr></thead><tbody><tr><td>$</td><td>$表示只消费新的消息，当前流中最大的Id，可用于将要到来的信息</td></tr><tr><td>&gt;</td><td>用于XREADGROUP命令，表示迄今还没有发送给组中使用者的信息，会更新消费者组的最后Id</td></tr><tr><td>*</td><td>用于XADD命令，让系统自动生成Id</td></tr></tbody></table><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mtext>基本命令代码实操</mtext></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{red}{基本命令代码实操}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback" style="color:red;">基本命令代码实操</span></span></span></span></p><p>Redis流实例演示</p><h2 id="队列相关命令" tabindex="-1"><a class="header-anchor" href="#队列相关命令"><span>队列相关命令</span></a></h2><h3 id="_1-xadd" tabindex="-1"><a class="header-anchor" href="#_1-xadd"><span>1.XADD</span></a></h3><p>添加消息到队列末尾，消息ID必须要比上一个ID大，默认用星号表示自动生成ID；* 用于XADD命令中，让系统自动生成ID；</p><p>XADD用于向Stream队列中添加消息，如果指定的Stream队列不存在，则该命令执行时会新建一个Stream队列</p><p><img src="'+c+'" alt=""></p><p>生成的消息ID，有两部分组成，毫秒时间戳-该毫秒内产生的第一条消息</p><p>// * 表示服务器自动生成MessageID(类似MySQL里面主键auto_increment)，后面顺序跟着一堆业务key/value</p><table><thead><tr><th>信息条目指的是序列号，在相同的毫秒下序列号从0开始递增，序列号是64位长度，理论上在同一毫秒内生成的数据量无法到达这个级别，因此不用担心序列号会不够用。milisecondsTime指的是Redis节点服务器的本地时间，如果存在当前的毫秒时间截比以前已经存在的数据的时间戳小的话(本地时间钟后跳)，那么系统将会采用以前相同的毫秒创建新的ID，也即redis 在增加信息条目时会检查当前 id 与上一条目的 id，自动纠正错误的情况，一定要保证后面的 id 比前面大，.个流中信息条目的ID必须是单调增的，这是流的基础。</th></tr></thead><tbody><tr><td>客户端显示传入规则:<br>Redis对于ID有强制要求，格式必须是<strong>时间戳-自增Id</strong>这样的方式，且后续ID不能小于前一个ID</td></tr><tr><td>Stream的消息内容，也就是图中的Messaget它的结构类似Hash结构，以kev-value的形式存在</td></tr></tbody></table><h3 id="_2-xrange-key-start-end-count-count" tabindex="-1"><a class="header-anchor" href="#_2-xrange-key-start-end-count-count"><span>2.XRANGE key start end [COUNT count]</span></a></h3><p>用于获取消息列表（可以指定范围），忽略删除的消息</p><p>start 表示开始值，-代表最小值</p><p>end 表示结束值，+代表最大值</p><p>count 表示最多获取多少个值</p><p><img src="'+d+'" alt=""></p><h3 id="_3-xrevrange-key-end-start-count-count" tabindex="-1"><a class="header-anchor" href="#_3-xrevrange-key-end-start-count-count"><span>3.XREVRANGE key end start [COUNT count]</span></a></h3><p>根据ID降序输出</p><p><img src="'+h+'" alt=""></p><h3 id="_4-xdel-key-id-id" tabindex="-1"><a class="header-anchor" href="#_4-xdel-key-id-id"><span>4.XDEL key id [id ...]</span></a></h3><p><img src="'+u+'" alt=""></p><h3 id="_5-xlen-key" tabindex="-1"><a class="header-anchor" href="#_5-xlen-key"><span>5.XLEN key</span></a></h3><p><img src="'+g+'" alt=""></p><h3 id="_6-xtrim-key-maxlen-minid" tabindex="-1"><a class="header-anchor" href="#_6-xtrim-key-maxlen-minid"><span>6.XTRIM key MAXLEN|MINID</span></a></h3><p>用于对Stream的长度进行截取，如超长会进行截取</p><p>MAXLEN 允许的最大长度，对流进行修剪限制长度</p><p>MINID 允许的最小id，从某个id值开始比该id值小的将会被抛弃</p><p><img src="'+x+'" alt=""></p><h3 id="_7-xread-count-count-block-milliseconds-streams-key-key-id-id" tabindex="-1"><a class="header-anchor" href="#_7-xread-count-count-block-milliseconds-streams-key-key-id-id"><span>7.XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] id [id ...]</span></a></h3><p>可以读取多个key</p><p><strong>用于获取消息(阻塞/非阻塞)</strong></p><p>​ 只会返回大于指定ID的消息，COUNT最多读取多少条消息；BLOCK是否以阻塞的方式读取消息，默认不阻塞，如果milliseconds设置为0，表示永远阻塞</p><p><strong>非阻塞</strong></p><ul><li><p>$表特殊ID，表示以当前Stream已经存储的最大的ID作为最后一个ID，当前Stream中不存在大于当前最大ID的消息，因此此时返回nil</p></li><li><p>0-0代表从最小的ID开始获取Stream中的消息，当不指定count，将会返回Stream中的所有消息，注意也可以使用0 (00/000也都是可以的)</p><p>​<img src="'+E+'" alt=""></p></li></ul><p><strong>阻塞</strong></p><p><img src="'+_+'" alt=""></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mtext>小总结（类似</mtext><mi>J</mi><mi>a</mi><mi>v</mi><mi>a</mi><mtext>里面的阻塞队列）</mtext></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{red}{小总结（类似Java里面的阻塞队列）}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback" style="color:red;">小总结（类似</span><span class="mord mathnormal" style="margin-right:0.09618em;color:red;">J</span><span class="mord mathnormal" style="color:red;">a</span><span class="mord mathnormal" style="margin-right:0.03588em;color:red;">v</span><span class="mord mathnormal" style="color:red;">a</span><span class="mord cjk_fallback" style="color:red;">里面的阻塞队列）</span></span></span></span></p><p>Stream的基础方法，使用XADD存入消息和XREAD循环阻塞读取消息的方式可以实现简易版的消息队列</p><p><img src="'+k+'" alt=""></p><hr><h2 id="消费组相关指令-1" tabindex="-1"><a class="header-anchor" href="#消费组相关指令-1"><span>消费组相关指令</span></a></h2><h3 id="_1-xgroup-create-key-group-id" tabindex="-1"><a class="header-anchor" href="#_1-xgroup-create-key-group-id"><span>1.XGROUP CREATE key group id|$</span></a></h3><p>用于创建消费组</p><p>xgroup create mystream group $</p><p>xgroup create mystream groupB 0</p><p>$表示从Stream尾部开始消费</p><p>0表示从Stream头部开始消费</p><p>创建消费组的时候必须指定ID，ID为0表示从头开始消费，为$表示只消费新消息</p><p><img src="'+y+'" alt="">&#39;&#39;</p><h3 id="_2-xreadgroup-group-group-count-count-block-milliseconds-streams-key-id" tabindex="-1"><a class="header-anchor" href="#_2-xreadgroup-group-group-count-count-block-milliseconds-streams-key-id"><span>2.XREADGROUP GROUP group [COUNT count] [BLOCK milliseconds] STREAMS key id</span></a></h3><p>&quot;&gt;&quot;，表示从第一条尚未被消费的消息开始读取</p><p><img src="'+b+'" alt=""></p><p>消费组groupA内的消费者consumer1从mystream消息队列中读取所有消息</p><p>但是，<strong>不同消费组</strong>的消费者可以消费同一条消息</p><p><img src="'+D+'" alt=""></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mtext>消费组的目的？</mtext></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{red}{消费组的目的？}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback" style="color:red;">消费组的目的？</span></span></span></span></p><p>让组内的多个消费者共同分担读取消息，所以，我们通常会让每个消费者读取部分消息，从而实现消息读取负载在多个消费者间是均衡分部的</p><p><img src="'+B+'" alt=""></p><h4 id="重点问题" tabindex="-1"><a class="header-anchor" href="#重点问题"><span>重点问题</span></a></h4><p>基于 Stream 实现的消息队列，如何保证消费者在发生故障或宕机再次重启后，仍然可以读取未处理完的消息?</p><p>Streams 会自动使用内部队列(也称为 PENDING List)留存消费组里每个消费者读取的消息保底措施，直到消费者使用 XACK命令通知 Streams&quot;消息已经处理完成”。 消费确认增加了消息的可靠性，一般在业务处理完成之后，需要执行 XACK 命令确认消息已经被消费完成</p><p><img src="'+S+'" alt=""></p><h3 id="_3-xpending" tabindex="-1"><a class="header-anchor" href="#_3-xpending"><span>3.XPENDING</span></a></h3><p>查询每个消费组内所有消费组<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mo stretchy="false">[</mo><mtext>已读取、但尚未确认</mtext><mo stretchy="false">]</mo></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{red}{[已读取、但尚未确认]}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen" style="color:red;">[</span><span class="mord cjk_fallback" style="color:red;">已读取、但尚未确认</span><span class="mclose" style="color:red;">]</span></span></span></span>的消息</p><p><img src="'+I+'" alt=""></p><p>查看某个消费组具体读取了那些数据</p><p><img src="'+f+'" alt=""></p><h3 id="_4-xack-key-group-id-id" tabindex="-1"><a class="header-anchor" href="#_4-xack-key-group-id-id"><span>4.XACK key group id [id...]</span></a></h3><p>向消息队列确认消息处理已完成</p><p><img src="'+A+'" alt=""></p><h3 id="xinfo-用于打印stream-consumer-group的详细信息" tabindex="-1"><a class="header-anchor" href="#xinfo-用于打印stream-consumer-group的详细信息"><span>XINFO 用于打印Stream\\Consumer\\Group的详细信息</span></a></h3><p><img src="'+R+'" alt=""></p>',94)])])}const M=s(X,[["render",w]]),F=JSON.parse('{"path":"/article/idxbkfgd/","title":"12.Redis流(Stream)","lang":"zh-CN","frontmatter":{"title":"12.Redis流(Stream)","createTime":"2025/08/25 22:29:42","permalink":"/article/idxbkfgd/","watermark":true},"readingTime":{"minutes":5.74,"words":1722},"git":{"createdTime":1756136329000,"updatedTime":1756136329000,"contributors":[{"name":"HRF","username":"HRF","email":"3398775460@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/HRF?v=4","url":"https://github.com/HRF"}]},"filePathRelative":"study-notes/back-end/redis/3.redis10大数据类型/12.Redis流(Stream).md","headers":[],"categoryList":[{"id":"3c4c90","sort":10002,"name":"study-notes"},{"id":"fe643d","sort":10003,"name":"back-end"},{"id":"46b09b","sort":10033,"name":"redis"},{"id":"b49e1a","sort":3,"name":"redis10大数据类型"}]}');export{M as comp,F as data};
