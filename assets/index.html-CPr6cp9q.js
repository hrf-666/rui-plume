import{_ as a,c as t,b as e,o as n}from"./app-BxaswAnj.js";const p="/rui-plume/assets/1.Redis%E4%BA%8B%E5%8A%A1%E7%94%A8%E6%B3%95%E5%AE%98%E7%BD%91%E4%BB%8B%E7%BB%8D-DhSh2a5C.jpg",c="/rui-plume/assets/2.Redis%E4%BA%8B%E5%8A%A1%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4-D09lfv03.jpg",i="/rui-plume/assets/3.Redis%E4%BA%8B%E5%8A%A1%E6%AD%A3%E5%B8%B8%E6%89%A7%E8%A1%8C-DF1wg1to.jpg",r="/rui-plume/assets/4.Redis%E6%94%BE%E5%BC%83%E4%BA%8B%E5%8A%A1-DtHb7cxi.jpg",l="/rui-plume/assets/5.%E5%85%A8%E4%BD%93%E8%BF%9E%E5%9D%90-%E5%86%A4%E5%A4%B4%E5%80%BA%E4%B8%BB-BUTsQnV3.jpg",o="/rui-plume/assets/6.Redis%E4%BA%8B%E5%8A%A1%E5%85%A8%E4%BD%93%E8%BF%9E%E5%9D%90-fpJpO5Wp.jpg",m="/rui-plume/assets/7.Redis%E4%BA%8B%E5%8A%A1%E5%86%A4%E5%A4%B4%E5%80%BA%E4%B8%BB-DExtMQCb.jpg",h="/rui-plume/assets/8.Redis%E4%B8%8D%E6%8F%90%E4%BE%9B%E5%9B%9E%E6%BB%9A%E5%8A%9F%E8%83%BD-DUcjswpO.jpg",d="/rui-plume/assets/9.Redis%E5%86%A4%E5%A4%B4%E5%80%BA%E4%B8%BB-CpJidrFe.jpg",E="/rui-plume/assets/10.Redis%E7%9A%84CAS-DnpHCWwL.jpg",x="/rui-plume/assets/11.Redis-watch-CHyN5_6I.jpg",g="/rui-plume/assets/12.watch%E6%97%B6key%E8%A2%AB%E4%BF%AE%E6%94%B9-DluUDM03.jpg",u="/rui-plume/assets/13.watch%E5%8A%A0%E5%A1%9E%E7%AF%A1%E6%94%B9%E5%AE%98%E6%96%B9%E8%AF%B4%E6%98%8E-D-oBErAZ.jpg",B="/rui-plume/assets/14.unwatch-CP5Kg9EY.jpg",A={};function w(k,s){return n(),t("div",null,[...s[0]||(s[0]=[e('<h1 id="怎么玩" tabindex="-1"><a class="header-anchor" href="#怎么玩"><span>怎么玩</span></a></h1><p>官网 ：https://redis.io/docs/manual/transactions/</p><p><img src="'+p+'" alt=""></p><h3 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h3><p><img src="'+c+'" alt=""></p><h3 id="case1-正常执行-multi-exec" tabindex="-1"><a class="header-anchor" href="#case1-正常执行-multi-exec"><span>case1：正常执行 MULTI EXEC</span></a></h3><p><img src="'+i+'" alt=""></p><h3 id="case2-放弃事务-multi-discard" tabindex="-1"><a class="header-anchor" href="#case2-放弃事务-multi-discard"><span>case2：放弃事务 MULTI DISCARD</span></a></h3><p><img src="'+r+'" alt=""></p><h3 id="case3-全体连坐" tabindex="-1"><a class="header-anchor" href="#case3-全体连坐"><span>case3：全体连坐</span></a></h3><p>官网说明：</p><p><img src="'+l+'" alt=""></p><p><img src="'+o+'" alt=""></p><p>一个语法出错，全体连坐。如果任何一个命令语法有错，Redis会直接返回错误，所有的命令都不会执行</p><h3 id="case4-冤头债主" tabindex="-1"><a class="header-anchor" href="#case4-冤头债主"><span>case4：冤头债主</span></a></h3><p><strong>官网说明：</strong></p><p><img src="'+m+'" alt=""></p><p><strong>补充：</strong></p><p><img src="'+h+'" alt=""></p><p><img src="'+d+'" alt=""></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mtext>注意和传统数据库事务的区别，不一定要么全部成功要么全部失败</mtext></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{red}{注意和传统数据库事务的区别，不一定要么全部成功要么全部失败}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback" style="color:red;">注意和传统数据库事务的区别，不一定要么全部成功要么全部失败</span></span></span></span></p><h3 id="case5-watch监控" tabindex="-1"><a class="header-anchor" href="#case5-watch监控"><span>case5：watch监控</span></a></h3><ul><li><p><strong>Redis使用Watch来提供乐观锁定，类似于CAS(Check-and-Set)</strong></p><ol><li><p>悲观锁：悲观锁(Pessimistic Lock)，顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁</p></li><li><p>乐观锁：乐观锁(Optimistic Lock)，顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mtext>所以不会上锁</mtext></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{red}{所以不会上锁}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback" style="color:red;">所以不会上锁</span></span></span></span>，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据。</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mtext>乐观锁策略：提交版本必须大于记录当前版本才能执行更新</mtext></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{red}{乐观锁策略：提交版本必须大于记录当前版本才能执行更新}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback" style="color:red;">乐观锁策略：提交版本必须大于记录当前版本才能执行更新</span></span></span></span></p></li><li><p>CAS</p><p><img src="'+E+'" alt=""></p></li></ol></li><li><p><strong>watch key [key ...]</strong></p><ol><li><p>初始化k1和balance两个key，先监控在开启multi，保证两个key变动在同一个事务内</p><p><img src="'+x+'" alt=""></p></li><li><p>有加塞篡改：watch命令是一种乐观锁的实现，Redis在修改的时候会检测数据是否被更改，如果被更改了，则执行失败</p><p><img src="'+g+'" alt=""></p><p>图中3和4不管哪个先执行，最终的结果都是整个事务执行失败</p><p><img src="'+u+'" alt=""></p></li></ol></li><li><p><strong>unwatch</strong></p><p><img src="'+B+'" alt=""></p></li><li><p><strong>小结</strong></p><p>一旦执行了exec之前加的监控锁都会被取消掉</p><p>当客户端连接丢失的时候(比如退出链接)，所有东西都会被取消监视</p></li></ul><h3 id="小总结" tabindex="-1"><a class="header-anchor" href="#小总结"><span>小总结</span></a></h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mtext>开启</mtext></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{red}{开启}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback" style="color:red;">开启</span></span></span></span>：以multi开始一个事务</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mtext>入队</mtext></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{red}{入队}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback" style="color:red;">入队</span></span></span></span>：将多个命令入队到事务中，接到这些命令并不会立即执行，而是放到等待执行的事务队列里面</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mstyle mathcolor="red"><mtext>执行</mtext></mstyle></mrow><annotation encoding="application/x-tex">\\textcolor{red}{执行}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback" style="color:red;">执行</span></span></span></span>：有exec命令触发事务</p>',27)])])}const y=a(A,[["render",w]]),b=JSON.parse('{"path":"/article/winrffny/","title":"2.怎么玩","lang":"zh-CN","frontmatter":{"title":"2.怎么玩","createTime":"2025/08/25 22:29:40","permalink":"/article/winrffny/","watermark":true},"readingTime":{"minutes":2.15,"words":644},"git":{"createdTime":1756136329000,"updatedTime":1756136329000,"contributors":[{"name":"HRF","username":"HRF","email":"3398775460@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/HRF?v=4","url":"https://github.com/HRF"}]},"filePathRelative":"study-notes/back-end/redis/5.Redis事务/2.怎么玩.md","headers":[],"categoryList":[{"id":"3c4c90","sort":10002,"name":"study-notes"},{"id":"fe643d","sort":10003,"name":"back-end"},{"id":"46b09b","sort":10033,"name":"redis"},{"id":"3ec128","sort":5,"name":"Redis事务"}]}');export{y as comp,b as data};
